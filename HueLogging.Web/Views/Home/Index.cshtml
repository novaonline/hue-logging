@{
	ViewData["Title"] = "Home";
	var bootStrapCol = "col-sm-6 col-md-4";
}
<div class="row">
	<div class="col-xs-12">
		<div id="hueUsageChartContainer" class="row hidden-at-start">
			<h2>Light Usage in @ViewBag.DaysBack day(s)</h2>
			<div class="col-md-12">
				<canvas></canvas>
			</div>
		</div>
	</div>
</div>
<hr />
<div class="row cards">
	@if (ViewBag.Newbie)
	{

		<div class="@bootStrapCol">
			<div class="thumbnail">
				<img data-src="holder.js/300x200?random=yes&text=Getting%20Started" alt="...">
				<div class="caption">
					<h3>Getting Started</h3>
					<p>
						Getting started is easy. All you have to do is setup a connection to your hue bridge and click start.
					</p>
					<p>
						<a href="/settings/setup" class="btn btn-primary" role="button">Setup Connection</a>
					</p>
				</div>
			</div>
		</div>
	}

	@await Component.InvokeAsync("HueLoggingStatusCard", new { bootstrapCol = bootStrapCol })

	<div class="@bootStrapCol">
		<div class="thumbnail">
			<img data-src="holder.js/300x200?random=yes&text=Monitor" alt="...">
			<div class="caption">
				<h3>Monitor Hue Log Process</h3>
				<p>
					In order to monitor how the background job is performing, you'll have to navigate to the hangfire dashboard.
				</p>
				<p>
					<a href="/hangfire" class="btn btn-primary" role="button">Hangfire Dashboard</a>
				</p>
			</div>
		</div>
	</div>


	@await Component.InvokeAsync("HueLightDetailsCards", new { daysBack = ViewBag.DaysBack, bootstrapCol = bootStrapCol })

	<div class="@bootStrapCol">
		<div class="thumbnail">
			<img data-src="holder.js/300x200?random=yes&text=Reconfigure" alt="...">
			<div class="caption">
				<h3>Reconfigure</h3>
				<p>
					If you lost the app key, reconfigure it in settings.
				</p>
				<p>
					<a href="/settings" class="btn btn-primary" role="button">Settings</a>
				</p>
			</div>
		</div>
	</div>
</div>

@section Scripts {
	<script src="~/js/holder.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.1/Chart.bundle.min.js"></script>
	<script>
		var container = document.querySelector('#hueUsageChartContainer');
		var canvas = container.querySelector('canvas');
		var myDoughnutChart;
		$(document).ready(function () {

			$.post("@Url.Action("GetSummary")", function (data) {
				if (data) {
					$(container).show();
					for (var i in data.datasets) {
						data.datasets[i].backgroundColor = dynamicColors();
					}
					var ctx = canvas.getContext('2d');
					myDoughnutChart = new Chart(ctx, {
						type: 'doughnut',
						data: data
					});
				}
				
			});
			canvas.onclick = function (evt) {
				var activePoints = myDoughnutChart.getElementsAtEvent(evt);
				if (activePoints[0]) {
					var chartData = activePoints[0]['_chart'].config.data;
					var idx = activePoints[0]['_index'];

					var label = chartData.labels[idx];
					var value = chartData.datasets[0].data[idx];

					var url = "/focuson?lightName=" + label;
					window.location.href = url;
				}
			};
		});
		var dynamicColors = function () {
			var r = Math.floor(Math.random() * 255);
			var g = Math.floor(Math.random() * 255);
			var b = Math.floor(Math.random() * 255);
			return "rgb(" + r + "," + g + "," + b + ")";
		}

	</script>
}